name: Test Patch Upgrades
on:
  workflow_dispatch:
  # schedule:
    # At 15:30 on Monday.
    # - cron: '30 15 * * 1'
  # pull_request:
    # types:
      # - opened
      # - closed
  push:
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'logs/**'
      - '!examples/inventory-local.yml'
      - 'README.md'
jobs:
  # print-variable:
  #   environment: patch-upgrade-workflow
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print starting version
  #       run: |
  #         echo "repo variable: ${{ vars.START_VERSION }}"

  # generate-matrices:
    # runs-on: ubuntu-22.04
    # steps:
      # Get system info
      # - run: ifconfig
      # - run: arp -a
      # - run: sudo dmidecode
      # - run: df -h
      # - run: free -m
      # - run: uname -a
      # - run: lsb_release -a
      # - run: echo "GitHub branch is ${{ github.ref }}"
      # - run: whoami
      # - run: pwd

      # - name: Check out repository code
      #   uses: actions/checkout@v3

      # - name: Set up Python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: '3.10'

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install requests
      # - name: Generate starting versions
        # id: generate-start
  #       run: |
  #         start=$(tests/generate_version_matrix.py v8.0.0)
  #         echo $start
  #         echo ::set-output name=start_versions::$start
      # - name: Generate upgrade versions
  #       id: generate-upgrade
  #       run: |
  #         upgrade=$(tests/generate_upgrade_matrix.py v8.0.0)
  #         echo $upgrade
  #         echo ::set-output name=upgrade_versions::$upgrade
  #   outputs:
  #     start_versions: ${{ steps.generate-start.outputs.start_versions }}
  #     upgrade_versions: ${{ steps.generate-upgrade.outputs.upgrade_versions }}

  test-release-branch:
    runs-on: ubuntu-22.04
    environment: patch-upgrade-workflow
    env:
      START_VERSION: ${{ vars.START_VERSION }}
      PROVIDER_SERVICE_1: ${{ vars.PROVIDER_SERVICE_1 }}
      PROVIDER_SERVICE_2: ${{ vars.PROVIDER_SERVICE_2 }}
      CHAIN_BINARY: ${{ vars.CHAIN_BINARY }}
      HOME_1: ${{ vars.HOME_1 }}
      HOME_2: ${{ vars.HOME_2 }}
      CHAIN_ID: ${{ vars.CHAIN_ID }}
      MONIKER_1: ${{ vars.MONIKER_1 }}
      MONIKER_2: ${{ vars.MONIKER_2 }}
      MNEMONIC_1: ${{ vars.MNEMONIC_1 }}
      MNEMONIC_2: ${{ vars.MNEMONIC_2 }}
      DENOM: ${{ vars.DENOM }}
      VAL_FUNDS: ${{ vars.VAL_FUNDS }}
      VAL_STAKE: ${{ vars.VAL_STAKE }}
      VOTING_PERIOD: ${{ vars.VOTING_PERIOD }}
      VAL1_RPC_PORT: ${{ vars.VAL1_RPC_PORT }}
      VAL2_RPC_PORT: ${{ vars.VAL2_RPC_PORT }}
      WALLET_1: ${{ vars.WALLET_1 }}
      WALLET_2: ${{ vars.WALLET_2 }}

    # needs: generate-matrices
    strategy:
      fail-fast: false
  #     matrix:
  #       ${{ fromJSON(needs.generate-matrices.outputs.upgrade_versions) }}
    steps:
      - name: Update PATH
        run: echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Bypass the grub-efi-amd64-signed package
        run: sudo apt-mark hold grub-efi-amd64-signed
      - run: echo "Test upgrading ${{ vars.START_VERSION }} to release branch"
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests toml-cli
      - name: Start chains
        run: |
          tests/patch-upgrade/start-chains.sh
      - name: Happy path test - transactions
          tests/test-tx-fresh.sh
